#!/usr/bin/env node

var Runner = require('../index'),
		fs = require('fs'),
		comb = require("comb"),
		string = comb.string,
		chars = comb.characters,
		path = require("path");

var printUsage = function() {
	console.log("USAGE : ?suite=SUITE_NAME ?tests=TEST_NAMES ?configuration=CONFIGURATION_FILE");
	console.log("soda-runner suite=supplier tests=test1,test2,test3");
	console.log("soda-runner configuration=configuration.json");
	console.log("DEFAULTS :\n\tsuite=all\n\ttests=all")
};

var logger = comb.logging.Logger.getLogger("soda-runner");

var isAbsolutePath = function(path) {
	return path && path.charAt(0) == "/";
};

var createArray = function(testStr) {
	if (testStr.indexOf(',') > 0) return testStr.replace(/\s+/g, "").split(",");
	else return testStr;
};

var loadConfiguration = function(fileName) {
	fileName = isAbsolutePath(fileName) ? filename : process.cwd() + "/" + fileName;
	if (path.existsSync(fileName)) {
		try {
			return JSON.parse(fs.readFileSync(fileName));
		} catch(e) {
			throw "soda-runner : Error parsing file '" + fileName + "'";
		}
	} else {
		throw "soda-runner : configuration file at '" + fileName + "' does not exist.";
	}
};

var processArguments = function(args) {
	var argObject = {suite : "all", tests : "all"};
	if (args.length) {
		for (var i in args) {
			var curr = args[i].split("=");
			if (curr.length == 2) {
				if (curr[0] == 'tests' || curr[0] == 'suite') {
					curr[1] = string.toArray(curr[1], ",");
				} else if (curr[0] == "logConfiguration") {
					curr[1] = loadConfiguration(curr[1]);
				} else if (curr[0] == 'configuration') {
					argObject = loadConfiguration(curr[1]);
					break;
				}
				argObject[curr[0]] = curr[1];
			}
		}
	}
	if (argObject.logConfiguration) {
		new comb.logging.PropertyConfigurator().configure(argObject.logConfiguration);
	} else {
		new comb.logging.BasicConfigurator().configure();
	}
	argObject.testDir = argObject.testDir || process.cwd() + "/tests";
	return argObject;
};

var printRes = function(title, itemPrefix, items, styleCb, level) {
	level = level || 1;
	if (title) {
		console.log(string.format("%[\t" + level + "]s%s", " ", title));
	}
	for (var i in items) {
		var item = items[i];
		if (typeof item == "object") {
			printRes(styleCb(string.style(i, ["bold", "underline"])), itemPrefix, item, styleCb, level + 1);
		}
		else {
			console.log(styleCb(string.format("%[ " + level + 1 + "]s %-40s %s", itemPrefix, i, items[i])));
		}
	}
};

var printResults = function(errors, successes) {
	var i;
	printRes(string.style("FAILED TESTS :", ["red", "bold"]), chars.ITALIC_X, errors, function(str) {
		return string.style(str, ["red", "italic"]);
	});
	printRes(string.style("PASSED", ["green", "bold"]), chars.CHECK, successes, function(str) {
		return string.style(str, ["green", "italic"]);
	});
};

var runSuites = function(args) {
	if (args.suite) {
		var runner = new Runner(args);
		runner.run(args.suite, args.tests).then(function(successes, errors) {
			printResults(errors, successes);
		}, function(err) {
			console.log("ERROR " + err);
		});
	}
	else printUsage()
};

runSuites(processArguments(process.argv.slice(1)));






